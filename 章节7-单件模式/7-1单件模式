# 单件模式（Singleton）

在有些系统中，为了节省内存资源、保证数据内容的一致性，对某些类要求只能创建一个实例，这就是所谓的单例模式。单件模式比较特殊的点在于，它没有使用到已往设计模式中的抽象手法，而是使用了将构造函数私有化这种编程方法实现。

## 单件类的基本概念和实现

单例（Singleton）模式的定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。

在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。

单例模式在现实生活中的应用也非常广泛，例如公司 CEO、部门经理等都属于单例模型。J2EE 标准中的 [Servlet](http://c.biancheng.net/servlet/)Context 和 ServletContextConfig、[Spring](http://c.biancheng.net/spring/) 框架应用中的 ApplicationContext、数据库中的连接池等也都是单例模式。

单例模式有 3 个特点：

1. 单例类只有一个实例对象；
2. 该单例对象必须由单例类自行创建；
3. 单例类对外提供一个访问该单例的全局访问点。

c++有位专家：Scott Meyers 有个观点，认为：要使接口或者类型易于正确使用，难以错误使用。这句话的意思就不要把保证不创建出多个类对象的责任推到单例类的使用者身上，这本身应该是类的设计者的责任。所以在设计单例的时候，应该是从类本身的设计入手，而不是说出一份文旦，告诉使用者，这个类只能确保new一次

## 单件类在多线程中可能导致的问题

## 饿汉式与懒汉式

## 单件类对象内存释放问题

## 单件类定义、UML图及另外一种实现方式