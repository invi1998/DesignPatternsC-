# 策略模式（strategy）

在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况，例如，出行旅游可以乘坐飞机、乘坐火车、骑自行车或自己开私家车等，超市促销可以釆用打折、送商品、送积分等方法。

在软件开发中也常常遇到类似的情况，当实现某一个功能存在多种算法或者策略，我们可以根据环境或者条件的不同选择不同的算法或者策略来完成该功能，如数据排序策略有冒泡排序、选择排序、插入排序、二叉树排序等。

如果使用多重条件转移语句实现（即硬编码），不但使条件语句变得很复杂，而且增加、删除或更换算法要修改原代码，不易维护，违背开闭原则。如果采用策略模式就能很好解决该问题。

策略模式和之前的模板方法模式有点类似，都是以扩展的方法来支撑变化。

策略（Strategy）模式的定义：该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。

简单来说就是：定义一系列算法（策略类），然后将每个算法封装起来，让他们可以互相替换。换句话说，策略模式通常是把一系列算法封装到一系列具体策略类中来作为抽象策略类的子类，然后根据实际情况进行使用这些子类

#### 策略模式的主要优点如下。

1. 多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句，如 if...else 语句、switch...case 语句。
2. 策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。
3. 策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。
4. 策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。
5. 策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。

#### 其主要缺点如下。

1. 客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。
2. 策略模式造成很多的策略类，增加维护难度。

## 一个具体实现范例测逐步重构

#### 情景模拟

随着游戏迭代，现在计划新增为角色加血的道具，当角色击杀或者走到特定位置的时候，这些回血道具就会出现；3品回血丹：回复200点生命值，2品回血丹：回复300点生命值，1品回血丹：回复500点生命值，Fighter 父类，F_Warrior,F_Magic,

#### Fighter.h

```h
#ifndef __RIGHER__
#define __RIGHER__

class ItemStrategy; // 外部类的前向声明

// 从当前这个代码中可以看到，角色是通过调用UseIem这个成员函数来实现血量回复功能，从实现的功能上讲，这代码没什么问题
// 但是从长远的角度，从面相对象的程序设计视角来看，可能会发现这些实现代码存在一些问题
// 如果增加新的能补充生命值的道具，那么我们就需要增加新的枚举型，然后也要在UseItm里增加新的if else 语句来新增判断逻辑
// 这种修改是不符合开闭原则的，而且一旦if else特别多的话，对程序的运行效率和可维护性也会造成影响
// 其次：代码复用性很差。试想如果将来怪物类型也能通过吃丹药回复血量，那将来可能需要将战斗者类中的UseIem拷贝到怪物类中去
// 显然这样会导致很多重复代码
// 第三个问题就是，目前道具的功能比较简单，但是考虑到将来道具功能变得复杂，比如丹药即能回血，也能回蓝等等，那样就会导致
// useiem里的代码逻辑变得复杂

// 
// 血量回复丹药
// enum ItenAddLife
// {
//     LP_HX1,     // 1品回血丹 
//     LP_HX2,     // 2品回血丹 
//     LP_HX3,     // 3品回血丹 
// };


// 战斗者父类
class Fighter
{
public:
    Fighter(int life, int magic, int attack):m_life(life),m_magic(magic),m_attack(attack)
    {}
    
    virtual ~Fighter() {}
    
public:
    // void UseItem(ItenAddLife djItem) // 复用丹药回复血量
    // {
    //     if(djItem == LP_HX3)
    //     {
    //         m_life += 200;
    //     }
    //     else if (djItem == LP_HX2)
    //     {
    //         m_life += 300;
    //     }
    //     else if (djItem == LP_HX1)
    //     {
    //         m_life += 500;
    //     }
    // }
    
public:
// 设置道具使用的策略（设置策略）
    void SetItemStrategy(ItemStrategy* strategy);
    void UseItem(); // 使用道具
    int GetLife();  // 获取生命值
    void SetLife(int life); // 设置生命值
    
protected:
    int m_life;
    int m_magic;
    int m_attack;
    
    // 指向策略类的指针
    ItemStrategy* itemstrategy = nullptr;
    // c++ 11中支持这样初始化
};

// 战士 类，父类为Fighter
class F_Warrior : public Fighter
{
public:
    F_Warrior(int life, int magic, int attack):Fighter(life, magic, attack)
    {}
};

// 法师 类，父类为Fighter
class F_Mage : public Fighter
{
public:
    F_Mage(int life, int magic, int attack):Fighter(life, magic, attack)
    {}
};

#endif
```

#### ItemStrategy.h

```h
#ifndef __ITEMSTRATEGY__
#define __ITEMSTRATEGY__

// 道具策略类父类
class ItemStrategy
{
public:
    virtual void UseItem(Fighter* mainobj) = 0;

    virtual ~ItemStrategy()
    {}

};

// 3品回血丹 策略类
class ItemStrategy_HXD3 : public ItemStrategy
{
public:
    virtual void UseItem(Fighter* mainobj)
    {
        mainobj->SetLife(mainobj->GetLife() + 200);
    }
};

// 2品回血丹 策略类
class ItemStrategy_HXD2 : public ItemStrategy
{
public:
    virtual void UseItem(Fighter* mainobj)
    {
        mainobj->SetLife(mainobj->GetLife() + 300);
    }
};

// 1品回血丹 策略类
class ItemStrategy_HXD1 : public ItemStrategy
{
public:
    virtual void UseItem(Fighter* mainobj)
    {
        mainobj->SetLife(mainobj->GetLife() + 500);
    }
};


#endif
```

#### Fighter.cpp

```c++
#include "Fighter.h"
#include "ItemStrategy.h"
#include <iostream>

using namespace std;

// 设置道具使用的策略
void Fighter::SetItemStrategy(ItemStrategy* strategy)
{
    itemstrategy = strategy;
}

// 使用道具
void Fighter::UseItem()
{
    itemstrategy->UseItem(this);
}

// 获取生命值
int Fighter::GetLife()
{
    return m_life;
}

// 设置生命值
void Fighter::SetLife(int life)
{
    m_life = life;
}
```

#### main.cpp

```c++
#include <stdio.h>
#include <iostream>
#include "Fighter.h"
#include "ItemStrategy.h"

using namespace std;

// 情景模拟，随着游戏迭代，现在计划新增为角色加血的道具，当角色击杀或者走到特定位置的时候，这些回血道具就会出现
// 3品回血丹：回复200点生命值，2品回血丹：回复300点生命值，1品回血丹：回复500点生命值，
// Fighter 父类，F_Warrior,F_Magic,

int main()
{
    // Fighter* prole_war = new F_Warrior(2000, 0, 60);
    
    // prole_war->UseItem(LP_HX2);
    
    
    // --------------------------策略模式改造之后的代码--------------------------
    
    // 创建角色
    Fighter* prole_war = new F_Warrior(2000, 0, 60);
    
    // 创建3品回血丹
    ItemStrategy* strategy = new ItemStrategy_HXD3();
    prole_war->SetItemStrategy(strategy);
    // 回血 + 200
    prole_war->UseItem();
    
    // 创建1品回血丹
    ItemStrategy* strategy2 = new ItemStrategy_HXD1();
    prole_war->SetItemStrategy(strategy2);
    // 回血 + 500
    prole_war->UseItem();
    
    
    std::cout << "查看角色血量：" << prole_war->GetLife() << std::endl;
    // 查看角色血量：2700
    
    // 释放资源
    delete prole_war;
    delete strategy;
    delete strategy2;
    
    return 0;
}


```



![](../img/impicture_20220107_204703.png)

策略模式的主要角色如下。

1. 抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。是所有策略类的父类，这里指ItemStrategy类
2. 具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。抽象策略类的子类，实现抽象策略类的接口，这里指ItemStrategy_HXD1, ItemStrategy_HXD2, ItemStrategy_HXD3
3. 环境（Context）类：持有一个策略类的引用，最终给客户端调用。这里指Fighter类

## 依赖倒置原则